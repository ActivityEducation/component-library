import{r as l,j as a}from"./iframe-DGiRyBXK.js";import{c as t}from"./emotion-styled-base.browser.esm-DOJJeMjc.js";const k=t("div",{target:"e1qdl4p34"})({name:"ik9irb",styles:"perspective:1000px;width:100%;height:100%;display:flex;justify-content:center;align-items:center"});var w={name:"81vz9c",styles:"transform:rotateY(180deg)"},F={name:"eufijl",styles:"transform:rotateX(180deg)"};const x=t("div",{target:"e1qdl4p33"})("position:relative;width:100%;height:100%;min-width:460px;min-height:280px;text-align:center;transition:transform ",e=>e.duration,"s;transform-style:preserve-3d;",e=>e.isFlipped&&(e.flipDirection==="vertical"?F:w),";"),h=t("div",{target:"e1qdl4p32"})("position:absolute;width:100%;height:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;display:flex;justify-content:center;align-items:center;border-radius:",e=>e.theme.borderRadius.md,";overflow:hidden;box-sizing:border-box;"),T=t(h,{target:"e1qdl4p31"})("background-color:",e=>e.theme.colors.background.surface,";border:1px solid ",e=>e.theme.colors.border.default,";box-shadow:",e=>e.theme.shadows.md,";");var N={name:"81vz9c",styles:"transform:rotateY(180deg)"},E={name:"eufijl",styles:"transform:rotateX(180deg)"};const q=t(h,{target:"e1qdl4p30"})("background-color:",e=>e.theme.colors.primary[95],";color:",e=>e.theme.colors.primary[10],";border:1px solid ",e=>e.theme.colors.primary[80],";box-shadow:",e=>e.theme.shadows.md,";",e=>e.flipDirection==="vertical"?E:N,";"),I=({front:e,back:u,defaultFlipped:m=!1,isFlipped:i,onFlipChange:s,duration:b=.6,flipDirection:o="horizontal",flipOnClick:d=!0,onClick:c,...g})=>{const[v,y]=l.useState(m),r=i!==void 0?i:v,p=l.useCallback(()=>{const n=!r;i===void 0&&y(n),s?.(n)},[r,i,s]),f=l.useCallback(n=>{d&&p(),c?.(n)},[p,c,d]);return a.jsx(k,{...g,children:a.jsxs(x,{isFlipped:r,duration:b,flipDirection:o,children:[a.jsx(T,{onClick:f,flipDirection:o,children:e}),a.jsx(q,{onClick:f,flipDirection:o,children:u})]})})};I.__docgenInfo={description:"The **Flipper** component provides a dynamic 3D flip animation effect, allowing\ncontent to be displayed on both a \"front\" and \"back\" side. This component is\nideal for interactive elements like flashcards, showcasing hidden details,\nor creating engaging transitions between related pieces of information.\nIt can operate as either a controlled or uncontrolled component, and offers\ncustomization for flip direction and animation duration.\n\n```typescript\nimport { Flipper } from \"@activityeducation/component-library\";\n```\n\n## Justification\nThe `Flipper` component adds a layer of interactivity and visual interest to\nthe user interface, making content more engaging and memorable. It's particularly\nuseful in educational contexts (e.g., digital flashcards) where presenting\ninformation in a reveal-on-demand manner enhances active recall. By encapsulating\nthe complex CSS 3D transformations and state management, it simplifies the\ncreation of such effects for developers, ensuring consistent performance and\nappearance across the application. Its configurable flip direction and click\nbehavior provide flexibility for various design patterns.\n\n## Acceptance Criteria\n- **GIVEN** the `Flipper` component is rendered, **THEN** it should display\nthe `front` content by default.\n- **WHEN** the `Flipper` is clicked (and `flipOnClick` is true), **THEN** it\nshould animate with a 3D flip effect to reveal the `back` content.\n- **WHEN** the `Flipper` is clicked again (and `flipOnClick` is true), **THEN**\nit should flip back to reveal the `front` content.\n- **GIVEN** `defaultFlipped` is true, **THEN** the `Flipper` should initially\ndisplay the `back` content (uncontrolled behavior).\n- **GIVEN** `isFlipped` prop is provided, **THEN** the `Flipper` should display\nits `front` or `back` content based on the prop's value (controlled behavior).\n- **WHEN** the `Flipper`'s flipped state changes, **THEN** the `onFlipChange`\ncallback should be triggered with the new state.\n- **GIVEN** `duration` is set, **THEN** the flip animation should take the\nspecified amount of time.\n- **GIVEN** `flipDirection` is 'horizontal' or 'vertical', **THEN** the flip\nanimation should occur around the Y-axis or X-axis, respectively.\n- **GIVEN** `flipOnClick` is false, **THEN** clicking the component should\n*not* trigger the flip animation.\n\n## Example & Props",methods:[],displayName:"Flipper",props:{front:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content to be displayed on the front side of the card."},back:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content to be displayed on the back side of the card."},defaultFlipped:{required:!1,tsType:{name:"boolean"},description:`If true, the card will initially be flipped to its back side.
Use this for uncontrolled behavior.
@default false`,defaultValue:{value:"false",computed:!1}},isFlipped:{required:!1,tsType:{name:"boolean"},description:`Controls the flipped state of the card (true for back, false for front).
Use this for controlled behavior.`},onFlipChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(flipped: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"flipped"}],return:{name:"void"}}},description:`Callback function that is called when the card's flipped state changes.
Provides the new flipped state (true if now showing back, false if now showing front).`},duration:{required:!1,tsType:{name:"number"},description:`The duration of the flip animation in seconds.
@default 0.6`,defaultValue:{value:"0.6",computed:!1}},flipDirection:{required:!1,tsType:{name:"union",raw:"'horizontal' | 'vertical'",elements:[{name:"literal",value:"'horizontal'"},{name:"literal",value:"'vertical'"}]},description:`The direction of the flip animation.
'horizontal' (around Y-axis) or 'vertical' (around X-axis).
@default 'horizontal'`,defaultValue:{value:"'horizontal'",computed:!1}},flipOnClick:{required:!1,tsType:{name:"boolean"},description:`If true, the card will flip when clicked.
@default true`,defaultValue:{value:"true",computed:!1}},css:{required:!1,tsType:{name:"SerializedStyles"},description:"Optional Emotion `css` prop for additional custom styles for the outer container."}}};export{I as F};
