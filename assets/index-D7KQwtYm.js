import{r as f,j as t,t as d}from"./iframe-DGiRyBXK.js";import{c as i}from"./emotion-styled-base.browser.esm-DOJJeMjc.js";import{c as m}from"./emotion-react.browser.esm-CRTluIfQ.js";import{I as g}from"./index-Cln6lCsR.js";const y=i("li",{target:"e1lvmwmb4"})("display:flex;align-items:center;padding:",e=>e.theme.spacing.md," ",e=>e.theme.spacing.lg,";border-bottom:1px solid ",e=>e.theme.colors.border.default,";background-color:",e=>e.theme.colors.background.surface,";font-family:",e=>e.theme.typography.fontFamily,";font-size:",e=>e.theme.typography.body.fontSize,";color:",e=>e.theme.colors.text.default,";transition:",e=>e.theme.transitions.fast,";&:last-child{border-bottom:none;}",e=>e.interactive&&m("cursor:pointer;&:hover{background-color:",e.theme.colors.neutral[95],";}",""),e=>e.disabled&&m("opacity:0.6;cursor:not-allowed;background-color:",e.theme.colors.neutral[98],";color:",e.theme.colors.neutral[50],";",e.interactive&&"pointer-events: none;",";",""),";"),b=i("div",{target:"e1lvmwmb3"})("display:flex;align-items:center;margin-right:",e=>e.theme.spacing.md,";flex-shrink:0;&>.fa-solid,&>.fa-regular,&>.fa-brands,&>svg,&>img{color:",e=>e.theme.colors.neutral[50],";}"),v=i("div",{target:"e1lvmwmb2"})({name:"1mervey",styles:"flex-grow:1;display:flex;flex-direction:column;justify-content:center"}),I=i("div",{target:"e1lvmwmb1"})("display:flex;align-items:center;margin-left:",e=>e.theme.spacing.md,";flex-shrink:0;&>.fa-solid,&>.fa-regular,&>.fa-brands,&>svg,&>img{color:",e=>e.theme.colors.neutral[50],";}"),N=f.forwardRef(({children:e,leading:s,trailing:o,interactive:r=!1,disabled:a=!1,onClick:l,...p},h)=>{const u=n=>{r&&!a&&l&&l(n)},c=n=>typeof n=="string"?t.jsx(g,{name:n,size:"md",color:a?d.colors.neutral[50]:d.colors.neutral[50]}):n;return t.jsxs(y,{ref:h,interactive:r,disabled:a,onClick:u,...p,children:[s&&t.jsx(b,{children:c(s)}),t.jsx(v,{children:e}),o&&t.jsx(I,{children:c(o)})]})}),w=i("ul",{target:"e1lvmwmb0"})("list-style:none;margin:0;padding:0;background-color:",e=>e.theme.colors.background.surface,";border-radius:",e=>e.theme.borderRadius.md,";box-shadow:",e=>e.theme.shadows.sm,";overflow:hidden;width:100%;box-sizing:border-box;"),x=({children:e,...s})=>t.jsx(w,{...s,children:e});N.__docgenInfo={description:'An individual item component for use within a `List` in the AscendUCore Design System.\nIt supports leading and trailing content, interactive states, and integrates with the theme.\nLeading/trailing content can be Font Awesome icon names (strings), SVG URLs, inline SVGs, or any ReactNode.\n\n```typescript\nimport { ListItem } from "@activityeducation/component-library";\n```\n\n## Justification\nThe `ListItem` component is a fundamental building block for displaying structured\ncontent in a vertical arrangement. It provides a standardized visual presentation\nfor individual entries, ensuring consistency across various lists in the application.\nBy supporting optional leading and trailing elements, it allows for rich and informative\nlist items, enhancing user comprehension and interaction. Its integration with the\ntheme and support for interactive/disabled states makes it a versatile and accessible\ncomponent for a wide range of UI needs.\n\n## Acceptance Criteria\n- **GIVEN** a `ListItem` is rendered, **THEN** it should display its `children` content.\n- **GIVEN** `leading` content is provided, **THEN** it should be displayed on the\nleft side of the list item.\n- **GIVEN** `trailing` content is provided, **THEN** it should be displayed on the\nright side of the list item.\n- **GIVEN** `interactive` is true, **THEN** the list item should display a hover\neffect and a pointer cursor.\n- **WHEN** an `interactive` `ListItem` is clicked (and not disabled), **THEN** its\n`onClick` callback should be triggered.\n- **GIVEN** `disabled` is true, **THEN** the list item should be visually disabled\nand not interactive.\n- **GIVEN** multiple `ListItem` components are in a `List`, **THEN** they should\nhave a visual separator between them, except for the last item.\n\n## Example & Props',methods:[],displayName:"ListItem",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The main content to be rendered inside the list item."},leading:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:`Content to be displayed at the leading (left) side of the list item,
typically an icon, avatar, or checkbox. Can be a string (Font Awesome class)
or a ReactNode.`},trailing:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:`Content to be displayed at the trailing (right) side of the list item,
typically a secondary action, text, or badge. Can be a string (Font Awesome class)
or a ReactNode.`},interactive:{required:!1,tsType:{name:"boolean"},description:`If true, the list item will have a hover effect, indicating it's interactive.
@default false`,defaultValue:{value:"false",computed:!1}},disabled:{required:!1,tsType:{name:"boolean"},description:`If true, the list item will be disabled, preventing interaction.
@default false`,defaultValue:{value:"false",computed:!1}},css:{required:!1,tsType:{name:"SerializedStyles"},description:"Optional Emotion `css` prop for additional custom styles."}}};x.__docgenInfo={description:`A container component for displaying a collection of \`ListItem\` components
in the AscendUCore Design System. It provides a consistent visual structure
for lists of content.

\`\`\`typescript
import { List, ListItem } from "@activityeducation/component-library";
\`\`\`

## Justification
The \`List\` component serves as a versatile container for presenting groups of
related information or actions in a clear, vertical arrangement. It ensures
visual consistency for all list-based UI elements across the application.
By providing a predefined structure and styling, it simplifies the creation
of navigation menus, itemized content displays, and interactive selections,
enhancing both development efficiency and user experience. Its integration
with \`ListItem\` components allows for rich and interactive list designs.

## Acceptance Criteria
- **GIVEN** the \`List\` component is rendered, **THEN** it should display its
\`ListItem\` children in a vertical stack.
- **GIVEN** the list, **THEN** it should apply consistent padding, background,
and border-radius as defined by the theme.
- **GIVEN** \`ListItem\` components are used as children, **THEN** they should
inherit the appropriate styles from the \`List\` container.
- **GIVEN** the list content is long, **THEN** it should be vertically scrollable
if its height is constrained by a parent.

## Example & Props`,methods:[],displayName:"List",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The `ListItem` components to be rendered within the list.\nOnly `ListItem` children are expected."},css:{required:!1,tsType:{name:"SerializedStyles"},description:"Optional Emotion `css` prop for additional custom styles."}}};export{x as L,N as a};
