import{r as s,j as i}from"./iframe-RAegngwO.js";import{c as t}from"./emotion-styled-base.browser.esm-DWA-sfXA.js";const w=t("div",{target:"e1qdl4p34"})({name:"ik9irb",styles:"perspective:1000px;width:100%;height:100%;display:flex;justify-content:center;align-items:center"});var x={name:"81vz9c",styles:"transform:rotateY(180deg)"},k={name:"eufijl",styles:"transform:rotateX(180deg)"};const F=t("div",{target:"e1qdl4p33"})("position:relative;width:100%;height:100%;min-width:460px;min-height:280px;text-align:center;transition:transform ",e=>e.duration,"s;transform-style:preserve-3d;",e=>e.isFlipped&&(e.flipDirection==="vertical"?k:x),";"),u=t("div",{target:"e1qdl4p32"})("position:absolute;width:100%;height:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;display:flex;justify-content:center;align-items:center;border-radius:",e=>e.theme.borderRadius.md,";overflow:hidden;box-sizing:border-box;"),q=t(u,{target:"e1qdl4p31"})("background-color:",e=>e.theme.colors.background.surface,";border:1px solid ",e=>e.theme.colors.border.default,";box-shadow:",e=>e.theme.shadows.md,";");var T={name:"81vz9c",styles:"transform:rotateY(180deg)"},j={name:"eufijl",styles:"transform:rotateX(180deg)"};const z=t(u,{target:"e1qdl4p30"})("background-color:",e=>e.theme.colors.primary[95],";color:",e=>e.theme.colors.primary[10],";border:1px solid ",e=>e.theme.colors.primary[80],";box-shadow:",e=>e.theme.shadows.md,";",e=>e.flipDirection==="vertical"?j:T,";"),R=({front:e,back:h,defaultFlipped:m=!1,isFlipped:a,onFlipChange:l,duration:b=.6,flipDirection:o="horizontal",flipOnClick:d=!1,onClick:c,...v})=>{const[y,g]=s.useState(m),n=a!==void 0?a:y,p=s.useCallback(()=>{const r=!n;a===void 0&&g(r),l?.(r)},[n,a,l]),f=s.useCallback(r=>{debugger;d&&p(),c?.(r)},[p,c,d]);return i.jsx(w,{...v,children:i.jsxs(F,{isFlipped:n,duration:b,flipDirection:o,children:[i.jsx(q,{onClick:f,flipDirection:o,children:e}),i.jsx(z,{onClick:f,flipDirection:o,children:h})]})})};R.__docgenInfo={description:`A component that provides a 3D flip animation for its content,
representing a front and back side. Ideal for flashcards or interactive elements.
Can be controlled or uncontrolled.`,methods:[],displayName:"Flipper",props:{front:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content to be displayed on the front side of the card."},back:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content to be displayed on the back side of the card."},defaultFlipped:{required:!1,tsType:{name:"boolean"},description:`If true, the card will initially be flipped to its back side.
Use this for uncontrolled behavior.
@default false`,defaultValue:{value:"false",computed:!1}},isFlipped:{required:!1,tsType:{name:"boolean"},description:`Controls the flipped state of the card (true for back, false for front).
Use this for controlled behavior.`},onFlipChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(flipped: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"flipped"}],return:{name:"void"}}},description:`Callback function that is called when the card's flipped state changes.
Provides the new flipped state (true if now showing back, false if now showing front).`},duration:{required:!1,tsType:{name:"number"},description:`The duration of the flip animation in seconds.
@default 0.6`,defaultValue:{value:"0.6",computed:!1}},flipDirection:{required:!1,tsType:{name:"union",raw:"'horizontal' | 'vertical'",elements:[{name:"literal",value:"'horizontal'"},{name:"literal",value:"'vertical'"}]},description:`The direction of the flip animation.
'horizontal' (around Y-axis) or 'vertical' (around X-axis).
@default 'horizontal'`,defaultValue:{value:"'horizontal'",computed:!1}},flipOnClick:{required:!1,tsType:{name:"boolean"},description:`If true, the card will flip when clicked.
@default true`,defaultValue:{value:"false",computed:!1}},css:{required:!1,tsType:{name:"SerializedStyles"},description:"Optional Emotion `css` prop for additional custom styles for the outer container."}}};export{R as F};
