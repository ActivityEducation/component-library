import{r as n,j as d}from"./iframe-DGiRyBXK.js";import{c as u}from"./emotion-styled-base.browser.esm-DOJJeMjc.js";const b=u("button",{target:"ec34bfk1"})("display:inline-flex;align-items:center;justify-content:center;padding:",e=>e.theme.spacing.md," ",e=>e.theme.spacing.lg,";border:none;background-color:transparent;cursor:pointer;font-family:",e=>e.theme.typography.fontFamily,";font-size:",e=>e.theme.typography.body.fontSize,";font-weight:",e=>e.theme.typography.body.fontWeight,";color:",e=>e.theme.colors.text.default,";transition:",e=>e.theme.transitions.default,";position:relative;&:hover:not(:disabled){color:",e=>e.theme.colors.primary[40],";background-color:",e=>e.theme.colors.neutral[95],";}",e=>e.isActive&&`
    color: ${e.theme.colors.primary[40]}; // Active tab text color
    font-weight: ${e.theme.typography.button.fontWeight}; // Bolder for active tab
    &::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 3px; // Thickness of the active indicator line
      background-color: ${e.theme.colors.primary[40]}; // Primary color for indicator
      border-radius: ${e.theme.borderRadius.sm} ${e.theme.borderRadius.sm} 0 0; // Rounded top corners
    }
  `,"&:disabled{opacity:0.6;cursor:not-allowed;color:",e=>e.theme.colors.neutral[50],";}"),p=({children:e,value:i,isActive:a=!1,onTabSelect:o,onClick:r,...s})=>{const c=l=>{o?.(i),r?.(l)};return d.jsx(b,{isActive:a,onClick:c,...s,children:e})},m=u("div",{target:"ec34bfk0"})("display:flex;border-bottom:1px solid ",e=>e.theme.colors.border.default,";background-color:",e=>e.theme.colors.background.surface,";border-radius:",e=>e.theme.borderRadius.md," ",e=>e.theme.borderRadius.md," 0 0;overflow-x:auto;-webkit-overflow-scrolling:touch;white-space:nowrap;box-shadow:",e=>e.theme.shadows.sm,";"),f=({children:e,defaultValue:i,value:a,onValueChange:o,...r})=>{const[s,c]=n.useState(a!==void 0?a:i),l=a!==void 0?a:s,h=t=>{a===void 0&&c(t),o?.(t)};return d.jsx(m,{role:"tablist",...r,children:n.Children.map(e,t=>n.isValidElement(t)&&t.type===p?n.cloneElement(t,{isActive:t.props.value===l,onTabSelect:h}):(console.warn("TabGroup expects only Tab components as children."),t))})};p.__docgenInfo={description:"",methods:[],displayName:"Tab",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content to be rendered inside the tab (e.g., text, icon)."},value:{required:!0,tsType:{name:"string"},description:"A unique value associated with this tab, used by TabGroup to identify the active tab."},isActive:{required:!1,tsType:{name:"boolean"},description:"Indicates if this tab is currently active. Managed by the parent TabGroup.",defaultValue:{value:"false",computed:!1}},onTabSelect:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:"Callback function when the tab is clicked. Managed by the parent TabGroup.\nThis prop is renamed from `onSelect` to `onTabSelect` to avoid type conflicts with\n`React.ButtonHTMLAttributes`.\n@param value The value of the clicked tab."},css:{required:!1,tsType:{name:"SerializedStyles"},description:"Optional Emotion `css` prop for additional custom styles."}}};f.__docgenInfo={description:"A container component for managing a group of `Tab` components in the AscendUCore Design System.\nIt handles the active state of tabs, ensures consistent styling, and provides\na mechanism for changing the active tab. Can be used as a controlled or uncontrolled component.\n\nA single **Tab** component is use within a `TabGroup` in the AscendUCore Design System.\nIt represents a clickable section with an active state indicator, typically used for\nnavigation between different content views.\n\n```typescript\nimport { TabGroup, Tab } from \"@activityeducation/component-library\";\n```\n\n## Justification\nThe `TabGroup` component is fundamental for creating organized and navigable interfaces.\nIt provides a structured way to present multiple content sections within a limited space,\nallowing users to switch between them efficiently. By managing the active state and\ndistributing relevant props to its `Tab` children, it enforces consistency in behavior\nand appearance across the application, reducing boilerplate code and improving maintainability.\nIts support for both controlled and uncontrolled modes offers flexibility for different\nimplementation patterns.\n\nThe `Tab` component provides a clear and intuitive way to organize content into distinct\nsections, improving user navigation and reducing visual clutter. By being part of a\n`TabGroup`, it ensures consistent styling and behavior across all tabbed interfaces\nin the application. Its active state indicator visually communicates the currently\nselected view, enhancing usability.\n\n## Acceptance Criteria\n- **GIVEN** a `TabGroup` is rendered with `Tab` children, **THEN** only one `Tab`\nshould be active at a time.\n- **GIVEN** `defaultValue` is provided, **THEN** the `Tab` with the matching `value`\nshould be active initially (uncontrolled behavior).\n- **GIVEN** `value` and `onValueChange` are provided, **THEN** the `TabGroup` should\nbehave as a controlled component, with the active tab determined by the `value` prop.\n- **WHEN** a `Tab` within the group is clicked, **THEN** its `isActive` state should\nupdate, and the `onValueChange` callback (if provided) should be triggered with the\nclicked `Tab`'s `value`.\n- **GIVEN** the tabs exceed the available horizontal space, **THEN** the `TabGroup`\nshould allow horizontal scrolling.\n- **GIVEN** a `Tab` is rendered, **THEN** it should be clickable.\n- **GIVEN** a `Tab`'s `isActive` prop is true, **THEN** it should display a distinct\nactive state (e.g., a highlighted text and an indicator line).\n- **WHEN** a `Tab` is clicked, **THEN** the `onTabSelect` callback should be triggered\nwith the `Tab`'s `value`.\n- **GIVEN** a `Tab` is `disabled`, **THEN** it should not be clickable and should\ndisplay a visually disabled state.\n\n## Example & Props",methods:[],displayName:"TabGroup",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The Tab components to be rendered within the group.\nOnly `Tab` children are expected."},defaultValue:{required:!1,tsType:{name:"string"},description:"The value of the tab that should be active by default.\nMust match the `value` prop of one of the `Tab` children."},value:{required:!1,tsType:{name:"string"},description:"The value of the currently active tab (controlled component).\nIf provided, `onValueChange` must also be provided."},onValueChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:"Callback function that is called when the active tab changes.\nProvides the `value` of the newly active tab."},css:{required:!1,tsType:{name:"SerializedStyles"},description:"Optional Emotion `css` prop for additional custom styles."}}};export{f as T,p as a};
